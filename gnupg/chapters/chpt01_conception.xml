<chapter><title>概念</title>
<sect1><title>公钥加密</title>
<para>加密的传统方法是只用一把密钥加密。信息发送者用这把钥匙对信息加密。接收信息者需要有完全相同的钥匙才能将加密了的信息解密。这把钥匙必须以一种其他人没有机会得到它的方式给予接收信息者。如果其他人得到了这把钥匙，这种加密方式就没用了。</para>
<para>使用一种称为“公开钥匙”的方法可以解决这个问题。公开钥匙的概念涉及两把钥匙。</para>

  <orderedlist>
    <listitem><para><emphasis>公钥</emphasis>：一把钥匙称为公钥（公开钥匙），可以以所有方式传递，任何人都可以得到。公钥通常有如下两个作用：</para>
      <itemizedlist>
          <listitem><para>信息发送者使用信息接收者的公钥对信息加密，然后将信息发送给接收者；</para></listitem>
          <listitem><para>信息接收者利用信息发送者的公钥验证信息的发送人身份。</para></listitem>
      </itemizedlist>
    </listitem>
    <listitem><para><emphasis>私钥</emphasis>：另一把钥匙称为私钥（隐密钥匙），这把钥匙是秘密的，不能传递出去。只有它的拥有者才能接触和使用它。私钥通常有如下两个作用：</para>
      <itemizedlist>
          <listitem><para>信息接收者使用自己的私钥解密信息；</para></listitem>
          <listitem><para>信息发送者用自己的私钥对要发送的信息签名。</para></listitem>
      </itemizedlist>
    </listitem>
  </orderedlist>

<para>如果正确实施了这种方法，从公钥不能得出密钥。信息发送者以信息接收者的公钥将信息加密，接收者则以自己的密钥解密。</para>
<para>这个概念的关键之处在于密钥必须保持秘密，不能随便给出或让任何除了密钥拥有者之外的人得到。请千万不要将你的密钥通过Internet寄出！另外，通过telnet使用GnuPG是非常不明智的。</para>
</sect1>

<sect1><title>数字签名</title>
<para>为证明一则信息确实是宣称信息发送者的人所发，发明了数字签名的概念。正如其名称显示，信息发送者数字化地在信息上签名。别人可以通过这个签名检验这个信息的真实性。使用这种方法，可以减少中“特洛伊木马计”的风险（即一则信息宣称是对某个问题的补丁，实际却包含病毒或乱动你计算机上的数据），同时信息或数据可以被确认是来自正当合法的来源，而被认为属实。</para>
<para>一个数字签名是通过密钥和信息本身而得来。信息可以通过信息发送者的公钥来验证。这样，不仅可以验证信息是正确的信息发送者所发，而且内容也得到验证。这样，信息接收者可以确认：信息来自该信息发送者，而且在传递过程中其内容没有改变。</para>
</sect1>

<sect1><title>信任网</title>
<para>公开钥匙算法的一个弱点在于如何传播公开钥匙。有可能有用户传递一把有虚假身份的公开钥匙。如果别人不知就里，用这把公钥加密信息，持有该虚假钥匙的侵入者就可以解密而读到信息。如果侵入者再将解密的信息以真正的公开钥匙加密，然后传送出去，这种进攻无法被发现。</para>

<para>对此问题，PGP的解决方法（因此也自动是GnuPG的解决方法）是对公开钥匙签名。每把公开钥匙都有一个相应的用户身份。一个人的公开钥匙可以由别人来签名。这些签名承认这把钥匙确实属于它所宣称的用户。至于有多信任这些签名，完全取决于GnuPG用户。当你信任给这把钥匙签名的人时，你认为这把钥匙是可信的，并确信这把钥匙确实属于拥有相应用户身份的人。只有当你信任签名者的公开钥匙时，你才能信任这个签名。要想绝对确信一把钥匙是正确和真实的，你就得在给予绝对信任之前，通过可靠渠道比较钥匙的“指纹”。 </para>
</sect1>
<sect1><title>指纹</title>
  <para>如何确定一把公钥是属于某个人的？每把公钥都有唯一的指纹，例如，当获得Bob的公钥时，要确定这把公钥确实是属于Bob的，那就要比对这把公钥的指纹，这个过程通常是通过电话或见面的方式确定的。</para>
</sect1>
<sect1><title>安全边界</title>
<para>如果你有数据想要保密，你所需做的远不止选择加密算法这一件事。你应该统筹考虑你的系统安全。一般我们认为PGP是安全的。在作者写本文时，尚未听说任何PGP被破译的事例。但这并不表示所有用PGP加密的信息都是安全的（举例说，如果NSA--美国国家安全局破解了PGP，它绝不会通知我。别的为真正邪恶目的破译密码的人也不会）。反过来说，即使PGP是完全“无法破译”的，也可以用别的方法来损害安全。</para>

<para>另一种可能的技术（虽然更难做到）是使用一种“特洛伊木马”程序，它可以传出用户所敲的键。也可以（但非常困难）传出屏幕显示的内容。使用这些技术，就根本不需要破译加密的信息了。针对以上这些危险，需要制定一个好的，深思熟虑的安全计划并付诸实施。</para>

<para>提到上述这些，目的并非想让人们怀疑一切，而是想指出需要采取很多措施才能达到更安全。最重要的是意识到加密只是安全的一个步骤，而不是全部的解决方案。 </para>
</sect1>

<sect1><title>PGP用户互联组</title>
<para>用户可以通过对相互公钥进行签名建立一个PGP用户互联组。比如Bob认识Alice，Bob将自己的公钥传给Alice之后，Alice在Bob的公钥上签名并传回给Bob，Bob保存这份签名的公钥。当Bob和Eve通信时，就将有Alice签名的自己的公钥复制给Eve，Eve之前已经有了Alice的公钥并信任Alice签名的其他用户的公钥，所以当他用Alice的公钥验证该签名有效时，就接收Bob，这样Alice就将Bob介绍给了Eve。</para>
</sect1>

<sect1><title>GnuPG处理过程</title>
  <para>在明白了上述的一些基本概念后，我们可以用下图表示“公开钥匙”的处理过程：</para>
  <figure><title>处理过程</title><imagedata fileref="images/gpgproc.svg"/></figure>
  <para><inlinemediaobject><imageobject><imagedata fileref="images/001.png"/></imageobject></inlinemediaobject>：Bob和Alice交换公钥；    
  </para>
  <para><inlinemediaobject><imageobject><imagedata fileref="images/002.png"/></imageobject></inlinemediaobject>：Bob和Alice通过指纹确认对方的公钥是信任的，并在上面签名；    
  </para>
  <para><inlinemediaobject><imageobject><imagedata fileref="images/003.png"/></imageobject></inlinemediaobject>：Bob利用Alice的公钥和要发送的信息生成加密信息；    
  </para>
  <para><inlinemediaobject><imageobject><imagedata fileref="images/004.png"/></imageobject></inlinemediaobject>：Bob利用自己的私钥对加密信息签名；    
  </para>
  <para><inlinemediaobject><imageobject><imagedata fileref="images/005.png"/></imageobject></inlinemediaobject>：Bob发送信息给Alice；    
  </para>
  <para><inlinemediaobject><imageobject><imagedata fileref="images/006.png"/></imageobject></inlinemediaobject>：Alice利用自己的私钥解密信息；    
  </para>
  <para><inlinemediaobject><imageobject><imagedata fileref="images/007.png"/></imageobject></inlinemediaobject>：Alice利用Bob的公钥验证签名信息以确定这个信息就是Bob发送的。    
  </para>
</sect1>
</chapter>
